// This file contains sketches of how to encode "planning" into a
// SAT-based solver, for bounded timesteps.
//
// To explain this, I need to cover:
//   1. The core components:
//      (a) the description of the state space; here it is a collection of boolean variables
//      (b) trajectories through the state space; which are derived from:
//      (b) the possible actions that may take place at every step; how are these written?
//      (c) specifications of what we want to see in the state space; e.g. initial and final states; or invariants
//   2. Exercise activities:
//      (a) How to encode a certain state space
//      (b) How to write down properties of states
//      (c) How to write down properties of trajectories:
//          - Initial/final states (i.e. planning)
//          - Invariants (e.g. safety properties)
//          - Step invariants (a state change never happens)
//      (d) How to write down actions from their descriptions

domain timestep { T1, T2, T3, T4 }

// print ({ for (t1 : timestep) t1 : { for (t2 : timestep) t2 : next(t1,t2) } })

domain variable { A, B, C }

atom isSet(t : timestep, v : variable)

// A way of saying that a variable has the same value in two timesteps
define no_change(v : variable, t1 : timestep, t2 : timestep) {
    (isSet(t1, v) | ~isSet(t2, v))
  & (isSet(t2, v) | ~isSet(t1, v))
  // alternative:
//  (isSet(t1, v) ==> isSet(t2, v)) & (isSet(t2, v) ==> isSet(t1, v))
}

// This is the description of what each of the actions does
//
// Every action has:
//    (a) a precondition: what must the state look like for this action to happen
//    (b) an effect: what does change in the next state
//    (c) a non-effect: what *doesn't* change in the next state (we could automate this)
//
// In other words: an action determines a relationship between the
// pre-state and the post-state.

domain action { A1, A2, A3 }

// FIXME: support for reading atoms from CSV files, so they are
// inputs, not outputs.
//
// Also need support for reading domains from files.
//
// Could also define tables inline:
//
//  define_table requires(a : action, v : variable, s : state)
//    { (A1, A, On), (A1, B, On)
//    , (A2, B, On)
//    , (A3, B, Off)
//    }
//
// define_table changes(a : action, v : variable, s : state)
//    { (A1, A, Off)
//    , (A2, B, Off)
//    , (A3, B, Off)
//    }
//
// define no_change(a : action, v : variable) {
//    forall (v' : variable)
//      forall (s : state)
//        changes(a, v', c) ==> v != v'
// }
// atom requiresOn(a : action, v : variable)
// atom requiresOff(a : action, v : variable)
// atom setsOn(a : action, v : variable)
// atom setsOff(a : action, v : variable)

// // If we had for each action:
// //  1. requiresOn(act, stVar), requiresOff(act, stVar)
// //  2. setsOn(act, stVar), setsOff(act, stVar)
// // Then we'd have a generic effect:
// define effect2 (act : action, tNow : timestep, tNext : timestep) {
//   (forall (v : variable) requiresOn(act, v) ==> isSet(tNow, v))
//   &
//   (forall (v : variable) requiresOff(act, v) ==> ~isSet(tNow, v))
//   &
//   (forall (v : variable) setsOn(act, v) ==> isSet(tNext, v))
//   &
//   (forall (v : variable) setsOff(act, v) ==> ~isSet(tNext, v))
//   &
//   (forall (v : variable) ~setsOn(act, v) ==> ~setsOff(act, v) ==> no_change(v, tNow, tNext))
// }


// switches 'A', if 'B' is set
define action1 (tNow : timestep, tNext : timestep) {
  isSet(tNow, A) & isSet(tNow, B) &
  ~isSet(tNext, A) &
  (forall (v : variable) v != A ==> no_change(v, tNow, tNext))
}

// sets 'B' if it is unset
define action2 (tNow : timestep, tNext : timestep) {
  // Precondition
  ~isSet(tNow,B) &
  // Postcondition
  isSet(tNext,B) &
  // Frame
  (forall (v : variable) v != B ==> no_change(v, tNow, tNext))
}

// unsets 'B' if it is set
define action3 (tNow : timestep, tNext : timestep) {
  // Precondition
  isSet(tNow,B) &
  // Postcondition
  ~isSet(tNext,B) &
  // Frame
  (forall (v : variable) v != B ==> no_change(v, tNow, tNext))
}

atom active(t : timestep, a : action)

define effect(tNow : timestep, tNext : timestep) {
    (active(tNow, A1) ==> action1(tNow, tNext))
  & (active(tNow, A2) ==> action2(tNow, tNext))
  & (active(tNow, A3) ==> action3(tNow, tNext))
}

// Generic planning stuff: this works for all planning problems, given
// a definition of 'effect' and an action 'type'.

define action_choice(t : timestep) {
  // Some action must take place
  (some (a : action) active(t, a))
  &
  // Only one action may take place
  (forall (a1 : action)
    forall (a2 : action)
      a1 = a2 | ~active(t, a1) | ~active(t, a2))
}

define steps {
  forall (t1 : timestep)
  forall (t2 : timestep)
    next(t1, t2) ==>
      action_choice(t1) & effect(t1, t2)
}

// We can now define some specifications

define initial {
  isSet(T1, A) & ~isSet(T1,B) & ~isSet(T1,C)
}

define final {
  ~isSet(T4,A) // & ~isSet(T4,B)
}

define preservesC {
  (isSet(T1,C) & isSet(T4,C))
}

// Exercise ideas:
// 1. Encode a domain into booleans
// 2. Encode a certain set of actions into an 'effect' definition
// 3. Do some planning with given initial and final states, and fixed number of steps
// 4. Encode some invariants that ought to hold all the way through; are there sequences that do this?
// 5. Encode some bad states; are there sequences of steps that can lead to such bad states? (e.g. both trains in the same track location...)

// Point is that we can encode 'action's by how they change the state

allsat (steps & initial & final & (forall (a : action) ~active(T4, a)))
  [ for (t : timestep)
      {
	"state" : [ for (v : variable) if (isSet(t,v)) v ], // { for (v : variable) v : isSet(t,v) },
	(if (t != T4)   // FIXME: ~last(t)
           "action" : (the (a : action) active(t,a)))
      }
  ]
